# -*- coding: utf-8 -*-
from glr import GLRParser

dictionaries = {
    u"CLOTHES": [u"куртка", u"пальто", u"шубы"]
}
grammar = u"""
    S = adj<agr-gnc=1> noun
"""
glr = GLRParser(grammar, dictionaries=dictionaries, debug=True)

text = u"""GLR алгоритм работает точно так же, как и LR алгоритм, за исключением того, что для конкретной грамматики GLR парсер обрабатывает все возможные трактовки входной последовательности, используя поиск в ширину. Генераторы GLR парсеров преобразуют исходную грамматику в таблицы парсера, точно так же, как и генераторы LR парсеров. Но, тогда как таблицы LR парсера допускают только один переход состояния (определенное исходным состоянием парсера и входным терминальным символом), таблицы GLR парсера допускают множество результирующих состояний. В результате GLR алгоритм допускает конфликты сдвиг/свертка и свертка/свертка. Когда возникает конфликт, стек парсера (магазинная память) разветвляется на два или больше параллельных стека, верхнее состояния которых соответствуют каждому возможному переходу. В дальнейшем следующий входной символ используется, чтобы определить следующие переходы на верхних состояниях каждой ветви стека. При этом опять может возникнуть необходимость разветвления стека. Если же для какого-либо верхнего состояния и входного символа не существует ни одного перехода (в таблице парсера), то эта ветвь стека считается ошибочной и отбрасывается."""

for string in glr.parse(text):
    print "FOUND:", string
